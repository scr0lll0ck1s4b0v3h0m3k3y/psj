#!/bin/sh

# Check if jq is installed
if ! command -v jq > /dev/null; then
    echo "Error: jq is required but not installed." >&2
    exit 1
fi

# Default settings
SHORT_MODE=0
EXCLUDE_PATTERNS=""
DIR="."

# Function to process a file
process_file() {
    file="$1"
    name=$(basename "$file" | jq -R .)
    content=$(cat "$file" | jq -Rs .)
    printf "{\n  \"name\": %s,\n" "$name"
    if [ "$SHORT_MODE" -eq 0 ]; then
        path=$(printf '%s' "$file" | jq -R .)
        printf "  \"type\": \"file\",\n  \"path\": %s,\n" "$path"
    fi
    printf "  \"content\": %s\n}\n" "$content"
}

# Function to process a directory
process_dir() {
    dir="$1"
    name=$(basename "$dir" | jq -R .)
    printf "{\n  \"name\": %s,\n" "$name"
    if [ "$SHORT_MODE" -eq 0 ]; then
        path=$(printf '%s' "$dir" | jq -R .)
        printf "  \"type\": \"directory\",\n  \"path\": %s,\n" "$path"
    fi
    printf "  \"children\": [\n"
    first=1
    for item in "$dir"/*; do
        if [ ! -e "$item" ]; then
            continue
        fi
        base=$(basename "$item")
        # Check if the item should be excluded
        excluded=0
        for pattern in $EXCLUDE_PATTERNS; do
            if printf "%s" "$base" | grep -q "$pattern"; then
                excluded=1
                break
            fi
        done
        if [ "$excluded" -eq 1 ]; then
            continue
        fi
        if [ $first -eq 0 ]; then
            printf ",\n"
        fi
        first=0
        if [ -d "$item" ]; then
            process_dir "$item"
        elif [ -f "$item" ]; then
            process_file "$item"
        fi
    done
    printf "  ]\n}\n"
}

# Parse options using getopts
while getopts "sx:" opt; do
    case $opt in
        s) SHORT_MODE=1 ;;
        x) EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS $OPTARG" ;;
        *) echo "Usage: $0 [-s] [-x pattern] [directory]" >&2; exit 1 ;;
    esac
done
shift $((OPTIND - 1))

# Set directory to process
if [ -n "$1" ]; then
    DIR="$1"
fi

if [ ! -e "$DIR" ]; then
    echo "Error: Path does not exist: $DIR" >&2
    exit 1
fi

# Main execution
if [ -d "$DIR" ]; then
    process_dir "$DIR"
elif [ -f "$DIR" ]; then
    process_file "$DIR"
else
    echo "Error: Not a file or directory: $DIR" >&2
    exit 1
fi
